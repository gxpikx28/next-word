{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6f307400-cbaa-435e-b649-e620428b773e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "from collections import defaultdict, Counter\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "10c1ca3a-56f2-44fe-9dd5-0de3a18723d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "from collections import defaultdict, Counter\n",
    "text = \"hello world hello universe hello world hello friend\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3168f69a-0f52-477f-86d4-ba5eefcab2a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "from collections import defaultdict, Counter\n",
    "text = \"hello world hello universe hello world hello friend\"\n",
    "tokens = text.split()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3327f06b-c83c-4543-a3db-d27e25a5e88c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "from collections import defaultdict, Counter\n",
    "text = \"hello world hello universe hello world hello friend\"\n",
    "tokens = text.split()\n",
    "bigrams = list(zip(tokens, tokens[1:]))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1d436f4-c4f7-4a23-a18f-e541919e7c57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The predicted next word for 'hello' is 'universe'\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "from collections import defaultdict, Counter\n",
    "\n",
    "# Sample text for building the model\n",
    "text = \"hello world hello universe hello world hello friend\"\n",
    "\n",
    "# Tokenize the text\n",
    "tokens = text.split()\n",
    "\n",
    "# Create bigrams\n",
    "bigrams = list(zip(tokens, tokens[1:]))\n",
    "\n",
    "# Build frequency tables\n",
    "bigram_freq = defaultdict(Counter)\n",
    "for w1, w2 in bigrams:\n",
    "    bigram_freq[w1][w2] += 1\n",
    "\n",
    "def predict_next_word(word):\n",
    "    if word in bigram_freq:\n",
    "        next_word = bigram_freq[word]\n",
    "        return random.choices(list(next_word.keys()), weights=next_word.values())[0]\n",
    "    else:\n",
    "        return \"No prediction available\"\n",
    "\n",
    "# Example usage\n",
    "current_word = \"hello\"\n",
    "predicted_word = predict_next_word(current_word)\n",
    "print(f\"The predicted next word for '{current_word}' is '{predicted_word}'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe68a45f-3798-4763-9596-d075b675667f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d05e788d-ad48-442c-b2fd-1ca23707577a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
